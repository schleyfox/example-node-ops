# Sample haproxy config for the example app running 4 workers (on 9002 - 9005)
# Run with haproxy -f haproxy_example.cfg
global
  maxconn 2000
  nbproc 1
  cpu-map 1 0
  log 127.0.0.1 local0
  # by default huge buffers are allocated per backend for storing health check
  # results. Reduce to save memory, especially when not doing string matching
  tune.chksize 128

defaults
  log global
  option dontlognull
  option log-separate-errors
  maxconn 2000
  # connect timeout on localhost doesn't matter
  timeout connect 5s

  # adjust this based on how long you can tolerate a request queueing.  Kept
  # high for the example to demonstrate the impact of queue.
  timeout queue 5s

  timeout check 5s

  # client and server timeouts should be kept high as haproxy will decrement
  # the sessions for a backend when the timeout expires.  The backend will
  # probably still be processing the request at the timeout, so sending a new
  # request its way would be bad.  This should possibly be infinite, but 60s
  # should be safe enough with timeouts on the client, especially when
  # stronger process supervision is added.
  timeout       client  60s
  timeout       server  60s

  # enables trying new backends on connection failure
  option        redispatch
  retries       3

  balance       static-rr
  option        http-keep-alive

listen stats_npbroc1
bind :8999
  mode http
  stats enable
  stats uri /
  bind-process 1

# example app backends
frontend example
  mode http
  option httplog
  bind :9001
  default_backend example

backend example
  mode http
  option httplog
  option tcplog

  # run 4 workers
  server worker1 127.0.0.1:9002 maxconn 1
  server worker2 127.0.0.1:9003 maxconn 1
  server worker3 127.0.0.1:9004 maxconn 1
  server worker4 127.0.0.1:9005 maxconn 1
